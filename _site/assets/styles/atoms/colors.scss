$darkblue: #162746;
$blue: #2f456c;
$lightblue: #276497;
$green: #00ba75;
$red: #ff615f;

$white: white;
$black: black;


/* for very combination check the contrast ratio !!!
  - http://leaverou.github.io/contrast-ratio/

  - white on darkblue: 14.9
  - white on blue: 9.6
  - white on lightblue: 6.3, only suitable for large fonts, 18pt and above
  - white on green: 2.5, not usable
  - white on red: 2.5, not usable
  - green on darkblue: 5.9, only suitable for large fonts, 18pt and above
*/

@mixin colors($combination: white-on-darkblue) {
  @if ($combination == white-on-darkblue) {
    color: $white;
    background-color: $darkblue;
    
  } @elseif ($combination == white-on-blue) {
    color: $white;
    background-color: $blue;
    
  } @elseif ($combination == white-on-lightblue) {
    color: $white;
    background-color: $lightblue;
    font-size: $heading-level-1;
    
  } @elseif ($combination == green-on-darkblue) {
    color: $green;
    background-color: $darkblue;
    font-size: $heading-level-1;
  }
}


@mixin color($color) {
  color: $color;
  background-color: transparent;
  
  a {
    color: $color;
    background-color: transparent;
  }
}


// Generate $total gradients from a list of $colors
// - the colors are lightened by $step percent
@mixin gradients($colors, $total, $step) {
  $gradients-per-color: $total % length($colors);
  $gradients: null;
  
  @each $color in $colors {
    @for $i from 1 through $gradients-per-color {
      $gradients: append($gradients, lighten($color, $i * $step));
    }
  }
  
  @include gradient($gradients);
}


@mixin gradient($list) {
  @for $i from 1 through length($list) {
    &:nth-of-type(#{$i - 1}) {
      background-color: nth($list, $i);
      color: nth($list, $i);
    }
  }
}